{
    "contents" : "---\ntitle: \"Shiny renderTable add.to.row\"\ndate: \"`r Sys.Date()`\"\noutput: html_document\n---\n\n[Shiny renderTable add.to.row](http://stackoverflow.com/questions/35704056/shiny-rendertable-add-to-row)\n\n## The Question\n\nI have a dataframe that could look like this\n\n```\n> df\nProduct    noPat     Val  Tot TotVal\nProduct A  -318 -108.12 1356 461.04\nProduct C   403  544.05  462  623.7\nProduct D   -32  -39.68  529 655.96\nProduct B   N/A     N/A  N/A    N/A\n```\n\nI would like to add two multicolumns using the `add.to.row` argmument in the `xtable` function.\n\n```\nprint(xtable(df, digits=2, caption=strCaption, label=\"Test_table\"), \n      size=\"footnotesize\", #Change size; useful for bigger tables\n      include.rownames=FALSE, #Don't print rownames\n      caption.placement=\"top\", \n      hline.after=NULL, #We don't need hline; we use booktabs\n      add.to.row = list(pos = list(-1, \n                                   nrow(df)),\n                        command = c(paste(\"\\\\hline \\n\",\n                                          \"& \\\\multicolumn{2}{c}{Growth} & \\\\multicolumn{2}{c}{Total} \\\\\\\\ \\n\",\n                                          \"\\\\hline \\n\"),\n                                    \"\\\\hline \\n\")\n      )\n)\n```\n\nWhich generates the desired latex output:\n\n```\n\\begin{table}[ht]\n\\centering\n\\caption{test} \n\\label{Test_table}\n\\begingroup\\footnotesize\n\\begin{tabular}{lllll}\n  \\hline \n & \\multicolumn{2}{c}{Growth} & \\multicolumn{2}{c}{Total} \\\\ \n \\hline \nProduct & noPat & Val & Tot & TotVal \\\\ \n Product A & -318 & -108.12 & 1356 & 461.04 \\\\ \n  Product C & 403 & 544.05 & 462 & 623.7 \\\\ \n  Product D & -32 & -39.68 & 529 & 655.96 \\\\ \n  Product B & N/A & N/A & N/A & N/A \\\\ \n   \\hline \n\\end{tabular}\n\\endgroup\n\\end{table}\n```\n\nWhich is the format I want. I would like Shiny to output this, but Shiny just adds the add.to.row argument as text output just above the table.\n\nMy implementation in Shiny:\n\n### Server.R\n\n```{r, eval = FALSE}\noutput$tabletest <- renderTable({\n        rows <<- nrow(df)\n        xtable(df, digits=2)\n\n      },\n\n      caption = \"Sample Data\",\n      caption.placement = getOption(\"xtable.caption.placement\", \"bottom\"), \n      caption.width = getOption(\"xtable.caption.width\", NULL),\n      include.rownames=getOption(\"xtable.include.rownames\", FALSE), #Don't print rownames\n      add.to.row = getOption(\"xtable.add.to.row\",list(pos = list(-1, \n                                   rows),\n                        command = c(paste(\"\\\\hline \\n\",\n                                          \"& \\\\multicolumn{2}{c}{Growth} & \\\\multicolumn{2}{c}{Total} \\\\\\\\ \\n\",\n                                          \"\\\\hline \\n\"),\n                                    \"\\\\hline \\n\")))\n      )\n```\n\n### UI.R\n\n```{r, eval = FALSE}\ntableOutput(\"tabletest\")\n```\n\n(See the question on Stack Overflow for more)\n\n\n## The Solution\n\nFor this solution, we won't worry about building all of the shiny code, but just generate the table.\n\nThe data for the table are\n\n```{r}\ndf <- \n  data.frame(Product = sprintf(\"Product %s\", c(\"A\", \"C\", \"D\", \"B\")),\n             noPat = c(-318, 403, -32, \"N/A\"),\n             Val = c(-108.12, 544.05, -39.68, \"N/A\"),\n             Tot = c(1356, 462, 529, \"N/A\"),\n             TotVal = c(461.04, 623.7, 655.96, \"N/A\"),\n             stringsAsFactors = FALSE)\n  \n```\n\nGenerating the table:\n\n```{r}\nlibrary(pixiedust)\n\nnew_head <- \n  rbind(c(\"\", \"Growth\", \"\", \"Total\", \"\"),\n        names(df)) %>%\n  as.data.frame(stringsAsFactors = FALSE)\n\n(out_table <- \n  dust(df) %>%\n  redust(new_head, part = \"head\") %>%\n  sprinkle(rows = 1, \n           cols = 2:3,\n           merge = TRUE,\n           part = \"head\") %>%\n  sprinkle(rows = 1,\n           cols = 4:5,\n           merge = TRUE,\n           part = \"head\") %>%\n  #* A little extra for formatting\n  sprinkle_table(pad = 3,\n          border = \"all\",\n          border_color = \"#DCDCDC\") %>%\n  sprinkle_print_method(\"html\"))\n```\n\nFor use in Shiny applications, the raw HTML needs to be given to `renderUI`, and can be done via\n\n```{r, eval = FALSE}\nout_table %>%\n  print(asis = FALSE) %>%\n  shiny::HTML()\n```\n\nIn the end, `pixiedust` is probably a little bit more code that the `xtable` solution, but didn't require any knowledge of either LaTeX or HTML, and the solution is transferrable across both output formats.  ",
    "created" : 1460516772361.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3303246113",
    "id" : "19ED613B",
    "lastKnownWriteTime" : 1460516829,
    "path" : "~/GitHub/pixiedust/supplementalDocumentation/xtable-SO-02.Rmd",
    "project_path" : "supplementalDocumentation/xtable-SO-02.Rmd",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "type" : "r_markdown"
}