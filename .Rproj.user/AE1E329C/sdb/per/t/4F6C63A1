{
    "contents" : "#' @name dust\n#' @export dust\n#' @importFrom ArgumentCheck newArgCheck\n#' @importFrom ArgumentCheck finishArgCheck\n#' @importFrom dplyr bind_cols\n#' @importFrom dplyr distinct\n#' @importFrom dplyr left_join\n#' @importFrom dplyr mutate_\n#' @importFrom tidyr gather_\n#' \n#' @title Dust Table Construction\n#' @description Dust tables consist of four primary components that are \n#'   built together to create a full table.  Namely, the \\code{head}, the \n#'   \\code{body}, the \\code{interfoot}, and the \\code{foot}.  Dust tables \n#'   also contain a table-wide attributes \\code{border_collapse} and \n#'   \\code{longtable} as well as a \\code{print_method} element.\n#'   \n#' @param object An object that has a \\code{tidy} method in \\code{broom}\n#' @param tidy_df When \\code{object} is an object that inherits the \n#'   \\code{data.frame} class, the default behavior is to assume that the \n#'   object itself is the basis of the table.  If the summarized table is \n#'   desired, set to \\code{TRUE}.\n#' @param keep_rownames Whe \\code{tidy_df} is \\code{FALSE}, setting \n#'   \\code{keep_rownames} binds the row names to the data frame as the first\n#'   column, allowing them to be preserved in the tabulated output.  This \n#'   is only to data frame like objects, as the \\code{broom::tidy.matrix} method \n#'   performs this already.\n#' @param glance_foot Arrange the glance statistics for the \\code{foot} of the\n#'   table. (Not scheduled for implementation until version 0.4.0)\n#' @param glance_stats A character vector giving the names of the glance statistics\n#'   to put in the output.  When \\code{NULL}, the default, all of the available \n#'   statistics are retrieved.  In addition to controlling which statistics are \n#'   printed, this also controls the order in which they are printed.\n#' @param col_pairs An integer indicating the number of column-pairings for the \n#'   glance output.  This must be less than half the total number of columns,\n#'   as each column-pairing includes a statistic name and value. See the full\n#'   documentation for the unexported function \\code{\\link{glance_foot}}.\n#' @param byrow A logical, defaulting to \\code{FALSE}, that indicates if the \n#'   requested statistics are placed with priority to rows or columns.  \n#'   See the full documentation for the unexported function \\code{\\link{glance_foot}}.\n#' @param descriptors A character vector indicating the descriptors to\n#'   be used in the table.  Acceptable inputs are \\code{\"term\"}, \n#'   \\code{\"term_plain\"}, \\code{\"label\"}, \\code{\"level\"}, and \n#'   \\code{\"level_detail\"}.  These may be used in any combination and\n#'   any order, with the descriptors appearing in the table from left\n#'   to right in the order given.  The default, \\code{\"term\"}, returns\n#'   only the term descriptor and is identical to the output provided\n#'   by \\code{broom::tidy} methods.  See Details for a full explanation\n#'   of each option and the Examples for sample output.\n#'   See the full documentation for the unexported function \\code{\\link{tidy_levels_labels}}.\n#' @param numeric_level A character string that determines which descriptor\n#'   is used for numeric variables in the \\code{\"level_detail\"} descriptor\n#'   when a numeric has an interaction with a factor.  Acceptable inputs\n#'   are \\code{\"term\"}, \\code{\"term_plain\"}, and \\code{\"label\"}.\n#'   See the full documentation for the unexported function \\code{\\link{tidy_levels_labels}}.\n#' @param caption A character string giving the caption for the table.\n#' @param float A logical used only in LaTeX output.  When \\code{TRUE}, the table is \n#'   set within a \\code{table} environment.  The default is \\code{TRUE}, as with \n#'   \\code{xtable}.\n#' @param longtable Allows the user to print a table in multiple sections.  \n#'     This is useful when \n#'     a table has more rows than will fit on a printed page.  Acceptable inputs are \\code{FALSE},\n#'     indicating that only one table is printed (default); \\code{TRUE} that the table should be \n#'     split into multiple tables with the default number of rows per table (see \"Longtable\"); or a \n#'     positive integer indicating how many rows per table to include. All other values are \n#'     interpreted as \\code{FALSE}.  In LaTeX output, remember that after each section, a page \n#'     break is forced. This setting may also be set from \\code{sprinkle}. \n#' @param hhline Logical.  When \\code{FALSE}, the default, horizontal LaTeX cell borders \n#'   are drawn using the \\code{\\\\cline} command.  These don't necessarily \n#'   play well with cell backgrounds, however.  Using \\code{hhline = TRUE} \n#'   prints horizontal borders using the \\code{\\\\hhline} command.  While the \n#'   \\code{hhline} output isn't disrupted by cell backgrounds, it may require \n#'   more careful coding of the desired borders.  In \\code{hhline}, cells with \n#'   adjoining borders tend to double up and look thicker than when using \n#'   \\code{cline}.\n#' @param label \\code{character(1)}. An optional string for assigning labels with \n#'   which tables can be referenced elsewhere in the document.  If \\code{NULL}, \n#'   \\code{pixiedust} attempts to name the label \\code{tab:[chunk-name]}, where \n#'   \\code{[chunk-name]} is the name of the \\code{knitr} chunk.  If this also\n#'   resolves to \\code{NULL} (for instance, when you aren't using \\code{knitr}, \n#'   the label \\code{tab:pixie-[n]} is assigned, where \\code{[n]} is the current value \n#'   of \\code{options()$pixie_count}.  Note that rendering multiple tables in a \n#'   chunk without specifying a label will result in label conflicts.\n#' @param justify \\code{character(1)}. Specifies the justification of the table on \n#'   the page.  May be \\code{\"center\"} (default), \\code{\"left\"}, or \\code{\"right\"}.\n#' @param bookdown Logical. When \\code{TRUE}, \\code{bookdown} style labels are\n#'   generated.  Defaults to \\code{FALSE}.\n#' @param ... Additional arguments to pass to \\code{tidy}\n#' @param ungroup Used when a \\code{grouped_df} object is passed to \\code{dust}.\n#'   When \\code{TRUE} (the default), the object is ungrouped and dusted \n#'   as a single table. When \\code{FALSE}, the object is split and each element\n#'   is dusted separately.\n#' \n#' @details The \\code{head} object describes what each column of the table\n#'   represents.  By default, the head is a single row, but multi row headers\n#'   may be provided.  Note that multirow headers may not render in markdown\n#'   or console output as intended, though rendering in HTML and LaTeX is \n#'   fairly reliable. In longtables (tables broken over multiple pages), \n#'   the \\code{head} appears at the top of each table portion.\n#'   \n#'   The \\code{body} object gives the main body of information.  In long tables,\n#'   this section is broken into portions, ideally with one portion per page.\n#'   \n#'   The \\code{interfoot} object is an optional table to be placed at the \n#'   bottom of longtable portions with the exception of the last portion.  A \n#'   well designed \\code{interfoot} can convey to the user that the table \n#'   continues on the next page.\n#'   \n#'   The \\code{foot} object is the table that appears at the end of the \n#'   completed table.  For model objects, it is recommended that the \n#'   \\code{\\link[broom]{glance}} statistics be used to display model fit \n#'   statistics.\n#'   \n#'   The \\code{border_collapse} object applies to an entire HTML table.  It\n#'   indicates if the borders should form a single line or distinct lines.\n#'   \n#'   The \\code{longtable} object determines how many rows per page are printed.\n#'   By default, all content is printed as a single table.  Using the \n#'   \\code{longtable} argument in the \\code{\\link{sprinkle}} function can change this\n#'   setting.\n#'   \n#'   The \\code{table_width} element is specific to LaTeX tables.  This is a reference\n#'   value for when column widths are specified in terms of the \\code{\\%} units.  For\n#'   example, a column width of \\code{20\\%} will be defined as \\code{table_width * .20}.\n#'   The value in \\code{table_width} is assumed to be in inches and defaults to 6.\n#'   \n#'   The \\code{tabcolsep} object determines the spacing between columns in a \n#'   LaTeX table in pt.  By default, it is set at 6.\n#'   \n#'   The \\code{print_method} object determines how the table is rendered when \n#'   the \\code{print} method is invoked.  The default is to print to the \n#'   console.\n#'   \n#' @return Returns an object of class \\code{dust}\n#'\n#' @section Upcoming Developments:\n#' \\itemize{\n#'   \\item{dust_part }{A wrapper for extracting objects from a \\code{dust} \n#'      object.  This is intended to assist in building custom heads and feet.}\n#' }\n#' \n#' @seealso \\code{\\link[broom]{tidy}} \\code{\\link{glance_foot}} \\code{\\link{tidy_levels_labels}}\n#' \n#' @author Benjamin Nutter\n#' \n#' @examples \n#' x <- dust(lm(mpg ~ qsec + factor(am), data = mtcars))\n#' x\n\ndust <- function(object, ...)\n{\n  UseMethod(\"dust\")\n}\n\n#' @rdname dust\n#' @export\ndust.default <- function(object, ..., \n                 tidy_df = FALSE, keep_rownames = FALSE,\n                 glance_foot = FALSE, glance_stats = NULL, \n                 col_pairs = 2, byrow = FALSE,\n                 descriptors = \"term\", \n                 numeric_level = c(\"term\", \"term_plain\", \"label\"),\n                 label = NULL,\n                 caption = NULL,\n                 justify = \"center\",\n                 float = getOption(\"pixie_float\", TRUE),\n                 longtable = getOption(\"pixie_longtable\", FALSE),\n                 hhline = getOption(\"pixie_hhline\", FALSE),\n                 bookdown = getOption(\"pixie_bookdown\", FALSE))\n{\n  Check <- ArgumentCheck::newArgCheck()\n  \n  #* By default, we assume data.frame-like objects are to be printed\n  #* as given.  All other objects are tidied.\n  if (!inherits(object, \"data.frame\") | tidy_df) \n    tidy_object <- broom::tidy(object, ...)\n\n  else if (inherits(object, \"data.frame\")){\n    if (inherits(object, \"data.table\"))\n      object <- as.data.frame(object)\n    if (keep_rownames){\n      tidy_object <- cbind(rownames(object), object)\n      rownames(tidy_object) <- NULL\n      tidy_object[, 1] <- as.character(tidy_object[, 1])\n      names(tidy_object)[1] <- \".rownames\"\n    }\n    else{\n      tidy_object <- object\n    }\n  }\n\n  if (!inherits(object, \"data.frame\") & any(!descriptors %in% \"term\")){\n    nms <- names(tidy_object)\n    \n    tidy_object <- tidy_levels_labels(object,\n                                      descriptors = descriptors,\n                                      numeric_level = numeric_level,\n                                      argcheck = Check) %>%\n      dplyr::left_join(tidy_object, .,\n                       by = c(\"term\" = \"term\"))\n    \n    if (!\"term\" %in% descriptors)\n      nms <- nms[!nms %in% \"term\"]\n    \n    tidy_object <- dplyr::select_(tidy_object, .dots = c(descriptors, nms))\n  }\n  \n  ArgumentCheck::finishArgCheck(Check)\n\n  #* Create the table head\n  head <- as.data.frame(t(names(tidy_object)),\n                        stringsAsFactors=FALSE)\n  names(head) <- names(tidy_object)\n\n  if (glance_foot){\n    foot <- glance_foot(object,\n                        col_pairs = col_pairs,\n                        total_cols = ncol(tidy_object),\n                        glance_stats = glance_stats,\n                        byrow = byrow) %>%\n      component_table()\n  }\n  else {\n    foot <- NULL\n  }\n\n  #* Eventually, by default, glance statistics will be inserted into\n  #* the 'foot' object.  Objects passed as data frames should not have\n  #* glance statistics by default.  Perhaps an option for glance_df should\n  #* be provided here.\n\n  print_method <- knitr::opts_knit$get(\"rmarkdown.pandoc.to\")\n  \n  if (is.null(print_method)) print_method <- getOption(\"pixiedust_print_method\")\n  \n  structure(list(head = component_table(head, tidy_object),\n                 body = component_table(tidy_object),\n                 interfoot = NULL,\n                 foot = foot,\n                 border_collapse = TRUE,\n                 caption = caption,\n                 label = label,\n                 justify = justify,\n                 float = float,\n                 longtable = longtable,\n                 table_width = 6,\n                 tabcolsep = 6,\n                 hhline = hhline,\n                 bookdown = bookdown,\n                 print_method = print_method),\n            class = \"dust\")\n\n}\n\n#' @rdname dust\n#' @export\n\ndust.grouped_df <- function(object, ungroup = TRUE, ...)\n{\n  if (ungroup)\n  {\n    dust.default(dplyr::ungroup(object), ...)\n  }\n  else\n  {\n    split_var <- attr(object, \"var\")\n    object <- dplyr::ungroup(object)\n    object <- split(object, object[, as.character(split_var)])\n    dust.list(object, ...)\n  }\n}\n\n#' @rdname dust\n#' @export\n\ndust.list <- function(object, ...)\n{\n  structure(\n    lapply(X = object, \n           FUN = dust, \n           ...),\n    class = \"dust_list\"\n  )\n}\n\n#***********************************************************\n#* Utilities\n\ncomponent_table <- function(tbl, object)\n{\n  #* Get the classes of each column in the data frame.\n  #* These will be needed later for the 'round' sprinkle.\n  if (missing(object)) object <- tbl\n  Classes <- data.frame(col_name = colnames(object),\n                        col_class = vapply(object, primaryClass, character(1)), \n                        stringsAsFactors=FALSE)\n  \n  #* Initialize the table with row index, column index, and value\n  tab <- gather_tbl(tbl)\n\n  #* Initialize default values of table attributes\n  tab <- dplyr::left_join(tab, cell_attributes_frame(nrow(tbl), ncol(tbl)),\n              by = c(\"row\" = \"row\", \"col\" = \"col\"))\n  \n  #* Join with column classes\n  tab <- dplyr::left_join(tab, Classes,\n              by = c(\"col_name\" = \"col_name\"))\n  return(tab)\n}\n\n#*********************************************\n\ngather_tbl <- function(tbl)\n{\n  #* Assign the row indices\n  dplyr::mutate_(tbl, row = ~1:n()) %>%\n    #* Gather into a table with row (numeric), col (character), \n    #* and value (character)\n    tidyr::gather_(\"col\", \"value\", \n                   gather_cols=names(tbl)[!names(tbl) %in% \"row\"]) %>%\n    #* Assign col_name as a factor.  Levels are in the same order as the column\n    #*   appear in the broom output\n    #* Extract numeric values of the col_name factor to get the column indices\n    #* Recast col_name as a character\n    dplyr::mutate_(col_name = ~factor(col, colnames(tbl)),\n                   col = ~as.numeric(col_name),\n                   col_name = ~as.character(col_name),\n                   value = ~as.character(value))\n}\n\n#*********************************************\n\ncell_attributes_frame <- function(nrow, ncol)\n{\n  expand.grid(row = 1:nrow,\n              col = 1:ncol,\n              fn = NA,\n              round = \"\",\n              bold = FALSE,\n              italic = FALSE,\n              halign = \"\",\n              valign = \"\",\n              bg = \"\",\n              font_family = \"\",\n              font_color = \"\",\n              font_size = \"\",\n              font_size_units = \"\",\n              left_border = \"\",\n              right_border = \"\",\n              top_border = \"\",\n              bottom_border = \"\",\n              height = \"\",\n              height_units = \"\",\n              width = \"\",\n              width_units = \"\",\n              rotate_degree = \"\",\n              pad = \"\",\n              rowspan = 1,\n              colspan = 1,\n              na_string = NA,\n              stringsAsFactors=FALSE) %>%\n    dplyr::mutate_(html_row = ~row,\n            html_col = ~col,\n            merge = ~FALSE)\n}\n\n\nprimaryClass <- function(x){\n  acceptedClasses <- c(\"integer\", \"double\", \"numeric\", \"character\", \"factor\", \"logical\")\n  class_vector <- class(x)\n  class_vector[class_vector %in% acceptedClasses][1]\n}\n\n\nutils::globalVariables(c(\".\", \"term\"))\n",
    "created" : 1460545198700.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1160070048",
    "id" : "4F6C63A1",
    "lastKnownWriteTime" : 1460544813,
    "path" : "~/GitHub/pixiedust/R/dust.R",
    "project_path" : "R/dust.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}