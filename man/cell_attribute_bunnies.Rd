% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/cell_attribute_bunnies.R
\name{cell_attribute_bunnies}
\alias{cell_attribute_bunnies}
\alias{dust_bg_pattern}
\alias{dust_bold}
\alias{dust_bold,}
\alias{dust_cell_bg}
\alias{dust_cell_border}
\alias{dust_cell_halign}
\alias{dust_cell_height}
\alias{dust_cell_padding}
\alias{dust_cell_valign}
\alias{dust_cell_width}
\alias{dust_fn}
\alias{dust_fn,}
\alias{dust_font_color}
\alias{dust_font_size}
\alias{dust_italic}
\alias{dust_rotate_text}
\alias{dust_round}
\title{Apply Functions to cells in a table}
\usage{
dust_bg_pattern(across = c("row", "column"), colors = c("#F0F0F0",
  "#BDBDBD"))

dust_bold(..., set_bold)

dust_cell_bg(..., color)

dust_cell_border(..., sides, thickness = 1, units = c("px", "pt"),
  style = c("solid", "dashed", "dotted"), color = "black")

dust_cell_height(..., height, units = c("px"))

dust_cell_width(..., width, units = c("\%", "px"))

dust_cell_halign(..., halign)

dust_cell_padding(..., padding)

dust_cell_valign(..., valign)

dust_fn(..., fn)

dust_font_color(..., color)

dust_font_size(..., size, units = c("\%", "px", "pt", "em"))

dust_italic(..., set_italic)

dust_rotate_text(..., degree)

dust_round(..., round)
}
\arguments{
\item{across}{A character string of length one.  Must be either \code{row} or \code{column} and
accepts partial matching.}

\item{colors}{A character vector of colors to recycle in the pattern.}

\item{...}{Named argument with characteristics described below.}

\item{set_bold}{Logical. Sets the \code{bold} flag for the table.}

\item{color}{A character string naming the background color for the cells}

\item{sides}{A character vector of up to length 4.  May use any of \code{"top"}, \code{"bottom"},
\code{"left"} or \code{"right"}.  The border style is applied to the sides of the table
specified.  Multiple sides are accepted and partial matching is performed.}

\item{thickness}{A numeric vector of length 1 specifying the thickness of the border.}

\item{units}{Units for the measurement.  Options may vary depending on the
attribute being modified, but the full list of valid options is included
in the argument's default vector.}

\item{style}{A character string giving the style for the border line.  Only the first value is
accepted.}

\item{height}{A character string or numeric value giving the height of the cell}

\item{width}{A character string or numeric value giving the width of the cell.}

\item{halign}{A character value.  May be any of \code{"l"}, \code{"left"}, \code{"c"},
\code{"center"}, \code{"r"}, or \code{"right"}.  Truthfully, only the first letter matters,
so submitting \code{halign = "cowabunga dude"} will center align a cell.  I've chosen to
allow this oddity since it will be forgiving of unintentional misspellings.}

\item{padding}{A numerical value that sets the cell padding in pixels.}

\item{valign}{A character value.  May be any of \code{"m"}, \code{"middle"}, \code{"b"},
\code{"bottom"}, \code{"t"}, or \code{"top"}.  Truthfully, only the first letter matters,
so submitting \code{halign = "muggles"} will align text in the center of a cell.  I've chosen to
allow this oddity since it will be forgiving of unintentional misspellings. Abuse the
privilege at your leisure.}

\item{fn}{An expression with the function to be applied to the tabulated values.  The object
on which `fn` should act is `value`. (ie, `quote(format(value, big.mark=","))`)}

\item{size}{Font size for the text.}

\item{set_italic}{Logical. Sets the \code{italic} flag for the table.}

\item{degree}{Integer.  The degree of rotation in a clockwise direction.  Negative values
rotate the text counter clockwise.}

\item{round}{Integer.  Determines the number of decimals to which a value is rounded via
the `round` function.}
}
\description{
Some cells may require particular formatting or additional calculation prior to
  rendering.  Examples of such cells are p-values and currencies.  Applying a function to
  these cells allows them to be formatted at the rendering time rather than having to
  format them into strings prior to rendering.
}
\details{
These are intended to be simple functions, mostly for formatting.  Calculations and
  advanced manipulations should be avoided.  Ideally, these should format numeric values or
  potentially perform regular expression manipulations.
}
\section{Input Formats}{

\itemize{
  \item{\code{row}}{ Integers giving rows across which a function is applied.  The function is always
    applied on the intersection of `row` and `col` (or `colname`).}
  \item{\code{col}}{ Integers giving columns over which a function is applied.  The function is always
    applied on the intersection of `row` and `col`.}
  \item{\code{colname}}{ A character vector of column names over which the column is applied.  The function is always
    applied on the intersection of `row` and `colname`.}
}
}
\examples{
x <- dust(lm(mpg ~ qsec + factor(am), data = mtcars))
x

x + dust_fn(colname = "p.value", fn = quote(pvalString(value)))

x + dust_fn(colname = "statistic", fn = quote(format(value, digits = 3)))

x +
dust_fn(colname = "statistic", fn = quote(format(value, digits = 3))) +
dust_fn(colname = "p.value", fn = quote(pvalString(value)))

x + dust_fn(colname = "estimate", fn = quote(format(value, digits = 3))) +
  dust_bold(colname = "estimate", row = 2, set_bold = TRUE)

x + dust_fn(colname = "estimate", fn = quote(format(value, digits = 3))) +
  dust_italic(colname = "estimate", row = 2, set_italic = TRUE)

x + dust_round(colname = c("estimate", "statistic", "std.error"), round = 3) +
  dust_fn(colname = "p.value", fn = quote(pvalString(value))) +
  dust_colnames("Term", "Estimate", "SE", "T statistic", "p-value")
}
\author{
Benjamin Nutter
}

