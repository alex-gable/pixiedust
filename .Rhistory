sprinkle(cols = "p.value",
fn = quote(pvalString(value))) %>%
sprinkle(cols = 2:4,
round = 2) %>%
sprinkle(pad = 3) %>%
sprinkle(rows = 1,
border = "top") %>%
sprinkle(rows = 6,
border = "bottom")
sprinkle_my_model <- function(x){
sprinkle(cols = "p.value",
fn = quote(pvalString(value))) %>%
sprinkle(cols = 2:4,
round = 2) %>%
sprinkle(pad = 3) %>%
sprinkle(rows = 1,
border = "top") %>%
sprinkle(rows = 6,
border = "bottom")
}
sprinkle_my_model <- function(x){
x %>%
sprinkle(cols = "p.value",
fn = quote(pvalString(value))) %>%
sprinkle(cols = 2:4,
round = 2) %>%
sprinkle(pad = 3) %>%
sprinkle(rows = 1,
border = "top") %>%
sprinkle(rows = 6,
border = "bottom")
}
dust(fit) %>% sprinkle_my_model
dust(fit) %>% sprinkle_my_model
fit <- lm(mpg ~ qsec + wt + am + factor(gear) + vs,
data = mtcars)
dust() %>% sprinkle_my_model
fit <- lm(mpg ~ qsec + wt + am + factor(gear) + vs,
data = mtcars) %>%
dust() %>% sprinkle_my_model
lm(mpg ~ qsec + wt + am + factor(gear) + vs,
data = mtcars) %>%
dust() %>% sprinkle_my_model
fit <- lm(mpg ~ qsec + wt + am + factor(gear),
data = mtcars)
fit %>% dust %>% medley_model
fibb <- function(n){
s <- vector('numeric', n)
s[1:2] <- c(1, 1)
for(i in 3:n){
s[i] <- s[i-1] + s[i-2]
}
return(s)
}
fibb(5)
fibb(100)
fibb(1)
fibb <- function(n){
if (n == 1) return(1)
else if (n == 2) return(c(1, 1))
else
{
s <- vector('numeric', n)
s[1:2] <- c(1, 1)
for(i in 3:n){
s[i] <- s[i-1] + s[i-2]
}
return(s)
}
}
fibb(1)
1:10
list(a = 1:10,)
list(a = 1:10,b = 20:21)
fibb(1.6)
fibb <- function(n){
checkmate::assertIntegerish(n)
if (n == 1) return(1)
else if (n == 2) return(c(1, 1))
else
{
s <- vector('numeric', n)
s[1:2] <- c(1, 1)
for(i in 3:n){
s[i] <- s[i-1] + s[i-2]
}
return(s)
}
}
fibb(1.6)
View(Plain)
sapply(Plain, class)
library(microbenchmark)
microbenchmark(
fibb <- NULL
for (i in 1:20){
fibb[i] <- i
}
)
library(microbenchmark)
microbenchmark(
{
fibb <- NULL
for (i in 1:20){
fibb[i] <- i
}
}
)
library(microbenchmark)
microbenchmark(
a={
fibb <- NULL
for (i in 1:200){
fibb[i] <- i
}
}
)
library(microbenchmark)
microbenchmark(
a={
fibb <- NULL
for (i in 1:200){
fibb[i] <- i
}
},
b = {
fibb <- vector("numeric", 200)
for (i in seq_along(fibb)){
fibb[i] <- i
}
}
)
devtools::install_local("C:/Users/Nutter/Documents/GitHub/redcapAPI")
library(redcapAPI)
rcon <- redcapConnection(url = "https://www.redcapplugins.org/api/",
token = "784BA0DEEAEDB3EFF73B355459F05062")
exportMetaData(rcon)
importRecords(rcon,
data = DATA)
library(readxl)
BASE <- "C:/Users/Nutter/Downloads"
DATA <- read_excel(file.path(BASE, "Data.Test.2.xlsx"))
importRecords(rcon,
data = DATA)
Finance <- read.csv("C:/Users/Nutter/Downloads/Transactions.csv")
View(Finance)
library(dplyr)
library(magrittr)
Finance <- read.csv("C:/Users/Nutter/Downloads/Transactions.csv") %>%
filter(grepl("S0071$", account))
View(Finance)
library(dplyr)
library(magrittr)
Finance <- read.csv("C:/Users/Nutter/Downloads/Transactions.csv") %>%
filter(grepl("S0071$", account)) %>%
arrange(description, category)
View(Finance)
library(dplyr)
library(magrittr)
library(magrittr)
Finance <- read.csv("C:/Users/Nutter/Downloads/Transactions.csv") %>%
filter(grepl("S0071$", account)) %>%
mutate(date = ymd(date)) %>%
arrange(description, date)
library(dplyr)
library(magrittr)
library(lubridate)
Finance <- read.csv("C:/Users/Nutter/Downloads/Transactions.csv") %>%
filter(grepl("S0071$", account)) %>%
mutate(date = ymd(date)) %>%
arrange(description, date)
library(dplyr)
library(magrittr)
library(lubridate)
Finance <- read.csv("C:/Users/Nutter/Downloads/Transactions.csv") %>%
filter(grepl("S0071$", account))
library(dplyr)
library(magrittr)
library(lubridate)
Finance <- read.csv("C:/Users/Nutter/Downloads/Transactions.csv",
stringsAsFactors = FALSE) %>%
filter(grepl("S0071$", account)) %>%
mutate(date = ymd(date)) %>%
arrange(description, date)
Finance <- read.csv("C:/Users/Nutter/Downloads/Transactions.csv",
stringsAsFactors = FALSE) %>%
filter(grepl("S0071$", account))
library(dplyr)
library(magrittr)
library(lubridate)
Finance <- read.csv("C:/Users/Nutter/Downloads/Transactions.csv",
stringsAsFactors = FALSE) %>%
filter(grepl("S0071$", account)) %>%
mutate(date = mdy(date)) %>%
arrange(description, date)
library(dplyr)
library(magrittr)
library(lubridate)
Finance <- read.csv("C:/Users/Nutter/Downloads/Transactions.csv",
stringsAsFactors = FALSE) %>%
filter(grepl("S0071$", account)) %>%
mutate(date = mdy(date)) %>%
arrange(description, date) %>%
select(-account) %>%
write.csv("C:/Users/Nutter/Desktop/Finance.csv")
library(ggplot2)
library(dplyr)
library(magrittr)
DF <- data.frame(x = rnorm(1000)) %>%
mutate(dx = dnorm(x))
library(ggplot2)
library(dplyr)
library(magrittr)
DF <- data.frame(x = rnorm(1000)) %>%
mutate(dx = dnorm(x))
ggplot(data = DF,
mapping = aes(x = 1,
y = x)) +
geom_boxplot()
library(ggplot2)
library(dplyr)
library(magrittr)
DF <- data.frame(x = rnorm(1000)) %>%
mutate(dx = dnorm(x))
ggplot(data = DF,
mapping = aes(x = 1,
y = x,
colour = dx)) +
geom_boxplot()
library(ggplot2)
library(dplyr)
library(magrittr)
DF <- data.frame(x = rnorm(1000)) %>%
mutate(dx = dnorm(x))
ggplot(data = DF,
mapping = aes(x = 1,
y = x,
fill = dx)) +
geom_boxplot()
library(ggplot2)
library(dplyr)
library(magrittr)
DF <- data.frame(x = rnorm(1000)) %>%
mutate(dx = dnorm(x))
ggplot(data = DF,
mapping = aes(x = 1,
y = x)) +
geom_boxplot() +
geom_point(mapping = aes(colour = dx))
library(ggplot2)
library(dplyr)
library(magrittr)
DF <- data.frame(x = rnorm(1000)) %>%
mutate(dx = dnorm(x))
ggplot(data = DF,
mapping = aes(x = 1,
y = x)) +
geom_boxplot() +
geom_point(mapping = aes(fill = dx))
library(ggplot2)
library(dplyr)
library(magrittr)
DF <- data.frame(x = rnorm(1000)) %>%
mutate(dx = dnorm(x))
ggplot(data = DF,
mapping = aes(x = 1,
y = x)) +
geom_boxplot() +
geom_point(fill = "green")
ggplot(data = DF,
mapping = aes(x = 1,
y = x)) +
geom_boxplot(fill = "green")
ggplot(data = DF,
mapping = aes(x = 1,
y = x)) +
geom_boxplot(mapping = aes(fill = dx))
library(shiny)
library(shinydashboard)
# Selected page.
g_sPage <- "Start"
# Start page body.
bodyStart <- tabItems(tabItem("StartPage", fluidRow(column(2, actionButton("Default", label = "Default"), actionButton("Other", label = "Other"))), class = "active"))
# User interface.
ui <- dashboardPage(header = dashboardHeader(dropdownMenuOutput("HeaderButton1"), dropdownMenuOutput("HeaderButton2"))
, sidebar = dashboardSidebar(uiOutput("SidebarPanel"))
, body = dashboardBody(uiOutput("Body")))
# Server.
server <- function(input, output, session) {
# Header button.
output$HeaderButton1 <- renderMenu({tags$li(class = "dropdownClass", a(href = "#", class = "dropdown-toggle", tags$span(style="color:white", icon("indent"), "Click For Default!!")))})
output$HeaderButton2 <- renderMenu({tags$li(class = "dropdownClass", a(href = "#", class = "dropdown-toggle", tags$span(style="color:white", icon("indent"), "Click For Other!!")))})
# Sidebar panel.
output$SidebarPanel <- renderUI({
if(USER$g_sPage == "Start"){
sidebarMenu(menuItem(text = "Start Page", tabName = "StartPage"))
}else if(USER$g_sPage == "Default"){
sidebarMenu(menuItem(text = "Default Page", tabName = "DefaultPage"))
}else if(USER$g_sPage == "Other"){
sidebarMenu(menuItem(text = "Other Page", tabName = "OtherPage"))
}
})
# Page content.
output$Body <- renderUI({
if(USER$g_sPage == "Start"){
bodyStart
}else if(USER$g_sPage == "Default"){
tabItems(tabItem("DefaultPage", "Default Page is active!", class = "active"))
}else if(USER$g_sPage == "Other"){
tabItems(tabItem("OtherPage", "Default Page is NOT active! This is the other page.", class = "active"))
}
})
# Set user choice to start.
USER <<- reactiveValues(g_sPage = g_sPage)
# Observe choice for default.
observeEvent(input$Default, {USER$g_sPage <- "Default"})
# Observe choice for other.
observeEvent(input$Other,   {USER$g_sPage <- "Other"})
}
shinyApp(ui, server)
install.packages("shinydashboard")
library(shiny)
library(shinydashboard)
# Selected page.
g_sPage <- "Start"
# Start page body.
bodyStart <- tabItems(tabItem("StartPage", fluidRow(column(2, actionButton("Default", label = "Default"), actionButton("Other", label = "Other"))), class = "active"))
# User interface.
ui <- dashboardPage(header = dashboardHeader(dropdownMenuOutput("HeaderButton1"), dropdownMenuOutput("HeaderButton2"))
, sidebar = dashboardSidebar(uiOutput("SidebarPanel"))
, body = dashboardBody(uiOutput("Body")))
# Server.
server <- function(input, output, session) {
# Header button.
output$HeaderButton1 <- renderMenu({tags$li(class = "dropdownClass", a(href = "#", class = "dropdown-toggle", tags$span(style="color:white", icon("indent"), "Click For Default!!")))})
output$HeaderButton2 <- renderMenu({tags$li(class = "dropdownClass", a(href = "#", class = "dropdown-toggle", tags$span(style="color:white", icon("indent"), "Click For Other!!")))})
# Sidebar panel.
output$SidebarPanel <- renderUI({
if(USER$g_sPage == "Start"){
sidebarMenu(menuItem(text = "Start Page", tabName = "StartPage"))
}else if(USER$g_sPage == "Default"){
sidebarMenu(menuItem(text = "Default Page", tabName = "DefaultPage"))
}else if(USER$g_sPage == "Other"){
sidebarMenu(menuItem(text = "Other Page", tabName = "OtherPage"))
}
})
# Page content.
output$Body <- renderUI({
if(USER$g_sPage == "Start"){
bodyStart
}else if(USER$g_sPage == "Default"){
tabItems(tabItem("DefaultPage", "Default Page is active!", class = "active"))
}else if(USER$g_sPage == "Other"){
tabItems(tabItem("OtherPage", "Default Page is NOT active! This is the other page.", class = "active"))
}
})
# Set user choice to start.
USER <<- reactiveValues(g_sPage = g_sPage)
# Observe choice for default.
observeEvent(input$Default, {USER$g_sPage <- "Default"})
# Observe choice for other.
observeEvent(input$Other,   {USER$g_sPage <- "Other"})
}
shinyApp(ui, server)
c(8, 3) / 25
Var1 <- c("C","C","T","T","T","C")
Var2 <- c(50, 100, 400, 200, 50, 200)
df <- data.frame(cbind(Var1, Var2))
df$Var2[df$Var1 == "T"] <- df$Var2*-1
class(cbind(Var1, Var2))
df <- data.frame(Var1, Var2)
df$Var2[df$Var1 == "T"] <- df$Var2*-1
length(df$Var2 * -1)
length(df$Var2[df$Var1 == "T"])
?bookdown::render_book
setwd("C:/Users/Nutter/Documents/GitHub/pixiedust")
bookdown::render_book("index.Rmd",
output_dir = getwd())
?bookdown::render_book
bookdown::render_book("index.Rmd",
output_dir = file.path(getwd(), "_book"))
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
?dust
library(pixiedust)
library(dplyr)
library(ggplot2)
library(magrittr)
library(pixiedust)
library(RColorBrewer)
library(tidyr)
palette <- brewer.pal(9, "PRGn")
library(dplyr)
library(ggplot2)
library(magrittr)
library(pixiedust)
library(RColorBrewer)
library(tidyr)
palette <- brewer.pal(9, "PRGn")
?dust
bookdown::render_book("index.Rmd",
output_dir = getwd())
dust(head(mtcars),
justify = "right")
dust(head(mtcars),
justify = "left")
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
example %>%
dplyr(row = 1:n()) %>%
gather("col", "value",
names(example)[!names(example) %in% "row"])
example %>%
mutate(row = 1:n()) %>%
gather("col", "value",
names(example)[!names(example) %in% "row"])
example <-
data.frame(x1 = c("r1, c1", "r2, c1", "r3, c1"),
x2 = c("r1, c2", "r2, c2", "r3, c2"),
x3 = c("r1, c3", "r2, c3", "r3, c3"),
stringsAsFactors = FALSE)
example
example %>%
mutate(row = 1:n()) %>%
gather("col", "value",
names(example)[!names(example) %in% "row"])
names(example)[!names(example) %in% "row"]
example %>%
mutate(row = 1:n())
example %>%
mutate(row = 1:n()) %>%
gather("col", "value",
names(example)[!names(example) %in% "row"])
example %>%
mutate(row = 1:n()) %>%
gather_("col", "value",
names(example)[!names(example) %in% "row"])
example %>%
mutate(row = 1:n()) %>%
gather_("col", "value",
names(example)[!names(example) %in% "row"]) %>%
mutate_(col_name = ~factor(col, colnames(tbl)),
col = ~as.numeric(col_name),
col_name = ~as.character(col_name),
value = ~as.character(value))
example %>%
mutate(row = 1:n()) %>%
gather_("col", "value",
names(example)[!names(example) %in% "row"]) %>%
mutate_(col_name = ~factor(col, colnames(example)),
col = ~as.numeric(col_name),
col_name = ~as.character(col_name),
value = ~as.character(value))
tbl <- dust(example)
tbl[["body"]]
object.size(example)
format(object.size(example), large.mark = ",")
format(object.size(example), big.mark = ",")
format(as.numeric(object.size(example)), big.mark = ",")
format(as.numeric(object.size(tbl)), big.mark = ",")
library(microbenchmark)
microbenchmark(dust = dust(example), kable = knitr::kable(example))
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
bookdown::render_book("index.Rmd",
output_dir = getwd())
