rows = 1:4
cols = 1:5
indices <- x[[part]][["row"]] %in% rows &
x[[part]][["col"]] %in% cols
part = "body"
indices <- x[[part]][["row"]] %in% rows &
x[[part]][["col"]] %in% cols
bg_pattern <- c("#FFFFFF", "#DDDDDD")
bg_pattern_by <- "rows"
pattern <- data.frame(row = sort(unique(x[[part]][["row"]][indices])))
pattern[["bg"]] <- rep(bg_pattern,
length.out = nrow(pattern))
pattern <-
dplyr::left_join(pattern,
x[[part]],
by = c("row" = "row")) %>%
dplyr::arrange(row, col)
x[[part]][["bg"]][indices] <- pattern[["bg.x"]]
x
x[[part]][["bg"]][indices]
x[[part]]
x[[part]][, c("row", "col", "bg")]
pattern <- data.frame(row = sort(unique(x[[part]][["row"]][indices])))
pattern[["bg"]] <- rep(bg_pattern,
length.out = nrow(pattern))
pattern
dplyr::left_join(pattern,
x[[part]],
by = c("row" = "row"))
dplyr::left_join(pattern,
dplyr::select(x[[part]], row, col),
by = c("row" = "row"))
pattern <-
dplyr::left_join(pattern,
dplyr::select(x[[part]], row, col),
by = c("row" = "row")) %>%
dplyr::arrange(row, col)
pattern
x[[part]]
dplyr::left_join(pattern,
dplyr::select(x[[part]], row, col),
by = c("row" = "row")) %>%
dplyr::arrange(col, row)
dplyr::left_join(pattern,
dplyr::select(x[[part]], row, col),
by = c("row" = "row"))
pattern <- data.frame(row = sort(unique(x[[part]][["row"]][indices])))
pattern[["bg"]] <- rep(bg_pattern,
length.out = nrow(pattern))
pattern <-
dplyr::left_join(pattern,
dplyr::select(x[[part]], row, col),
by = c("row" = "row")) %>%
dplyr::arrange(col, row)
pattern
source('~/GitHub/pixiedust/R/sprinkle2.R', echo=TRUE)
source('~/GitHub/pixiedust/R/sprinkle2.R', echo=TRUE)
x %>% sprinkle2(bg_pattern = "red", "blue")
x %>% sprinkle2(bg_pattern = c("red", "blue"))
source('~/GitHub/pixiedust/R/sprinkle2.R', echo=TRUE)
x %>% sprinkle2(bg_pattern = c("red", "blue"))
x %>% sprinkle2(bg_pattern = c("red", "blue"), rows = 2:4)
x %>% sprinkle2(bg_pattern = c("red", "blue"), rows = 2:4, cols = 1:3)
x %>% sprinkle2(bg_pattern = c("red", "blue"), rows = 2:4, cols = 1:3, bg_pattern_by = "cols")
x %>% sprinkle2(bg_pattern = c("red", "blue"), rows = 2:4, cols = 1:3)
rows = 2:4
x %>% sprinkle2(bg_pattern = c("red", "blue"), cols = 1:3)
rows = 2:4
cols = 1:3
indices <- x[[part]][["row"]] %in% rows &
x[[part]][["col"]] %in% cols
bg_pattern_by = c('red', 'blue')
pattern <- data.frame(row = sort(unique(x[[part]][["row"]][indices])))
pattern[["bg"]] <- rep(bg_pattern,
length.out = nrow(pattern))
dplyr::left_join(pattern,
dplyr::select(x[[part]], row, col),
by = c("row" = "row"))
pattern <-
dplyr::left_join(pattern,
dplyr::select(x[[part]], row, col),
by = c("row" = "row")) %>%
dplyr::arrange(col, row)
x[[part]][, c("row", "col", "bg")][indices]
x[[part]][indices, c("row", "col", "bg")]
pattern[["bg"]]
dplyr::left_join(pattern,
dplyr::select(x[[part]][indices, ], row, col),
by = c("row" = "row")) %>%
dplyr::arrange(col, row)
dplyr::left_join(pattern,
dplyr::select(x[[part]][indices, ], row, col),
by = c("row" = "row"))
pattern <- data.frame(row = sort(unique(x[[part]][["row"]][indices])))
pattern[["bg"]] <- rep(bg_pattern,
length.out = nrow(pattern))
pattern <-
dplyr::left_join(pattern,
dplyr::select(x[[part]][indices, ], row, col),
by = c("row" = "row")) %>%
dplyr::arrange(col, row)
pattern
source('~/GitHub/pixiedust/R/sprinkle2.R', echo=TRUE)
x %>% sprinkle2(bg_pattern = c("red", "blue"), cols = 1:3)
source('~/GitHub/pixiedust/R/sprinkle2.R', echo=TRUE)
x %>% sprinkle2(bg_pattern = c("red", "blue"), cols = 1:3)
fit <- lm(mpg ~ qsec + wt + factor(am),
data = mtcars)
x <- dust(fit) %>% medley_model() %>% sprinkle_print_method("html")
rm(list = ls())
fit <- lm(mpg ~ qsec + wt + factor(am),
data = mtcars)
x <- dust(fit) %>% medley_model() %>% sprinkle_print_method("html")
source('~/GitHub/pixiedust/inst/save_sprinkles_rda.R', echo=TRUE)
source('~/GitHub/pixiedust/R/sprinkle2.R', echo=TRUE)
x %>% sprinkle2(bg_pattern = c("red", "blue"), cols = 1:3)
x %>% sprinkle2(bg_pattern = c("red", "blue"), cols = 2:3)
fit <- lm(mpg ~ qsec + wt + factor(am),
data = mtcars)
x <- dust(fit) %>% medley_model() %>% sprinkle_print_method("html")
x %>% sprinkle2(bg_pattern = c("red", "blue"), cols = 2:3)
x %>% sprinkle2(bg_pattern_by = "rows")
source('~/GitHub/pixiedust/R/sprinkle2.R', echo=TRUE)
x %>% sprinkle2(bg_pattern_by = "rows")
source('~/GitHub/pixiedust/R/sprinkle2.R', echo=TRUE)
x %>% sprinkle2(bg_pattern_by = "rows")
source('~/GitHub/pixiedust/R/sprinkle2.R', echo=TRUE)
x %>% sprinkle2(bg_pattern_by = "rows")
x %>% sprinkle2(bg_pattern_by = "rows", bg_pattern = c("green", "purple"))
library(pixiedust)
fit <- lm(mpg ~ qsec + wt + factor(am),
data = mtcars)
x <- dust(fit) %>% medley_model() %>% sprinkle_print_method("html")
source('~/GitHub/pixiedust/inst/save_sprinkles_rda.R', echo=TRUE)
source('~/GitHub/pixiedust/R/sprinkle2.R', echo=TRUE)
library(microbenchmark)
library(microbenchmark)
microbenchmark(
orig = x %>% sprinkle(bg_pattern_by = "rows"),
new = x %>% sprinkle2(bg_pattern_by = "rows")
)
library(microbenchmark)
microbenchmark(
orig = mtcars %>% sprinkle(bg_pattern_by = "rows"),
new = mtcars %>% sprinkle2(bg_pattern_by = "rows")
)
library(microbenchmark)
microbenchmark(
orig = dust(mtcars) %>% sprinkle(bg_pattern_by = "rows"),
new = dust(mtcars) %>% sprinkle2(bg_pattern_by = "rows")
)
X <- lapply(letters, identity)
Y <- X
y_wait <- rep(TRUE, length(Y))
microbenchmark(
direct =
while(length(X))
{
X[[1]] <- NULL
},
while(sum(y_wait))
{
y_wait[y_wait][1] <- FALSE
}
)
X <- lapply(letters, identity)
Y <- X
y_wait <- rep(TRUE, length(Y))
microbenchmark(
direct =
while(length(X))
{
X[[1]] <- NULL
},
indirect =
while(sum(y_wait))
{
y_wait[y_wait][1] <- FALSE
}
)
microbenchmark(
orig = dust(mtcars) %>% sprinkle(bg_pattern_by = "rows"),
new = dust(mtcars) %>% sprinkle2(bg_pattern_by = "rows")
)
microbenchmark(
orig = dust(mtcars) %>% sprinkle(bg = "gray"),
new = dust(mtcars) %>% sprinkle2(bg = "gray")
)
21/44
21.13622/44.95174
1 - 21.13622/44.95174
1 / (1 - 21.13622/44.95174)
44.95174/21.13622
1 / (21.13622/44.95174)
devtools::test("C:/Users/Nutter/Documents/GitHub/pixiedust")
devtools::test("C:/Users/Nutter/Documents/GitHub/pixiedust")
fit <- lm(mpg ~ qsec + factor(am) + wt * factor(gear), data = mtcars)
Dust <- dust(fit) %>%
sprinkle(cols = 2:4, round = 2)
devtools::test("C:/Users/Nutter/Documents/GitHub/pixiedust")
devtools::install_local("C:/Users/Nutter/Documents/GitHub/pixiedust")
devtools::test("C:/Users/Nutter/Documents/GitHub/pixiedust")
devtools::test("C:/Users/Nutter/Documents/GitHub/pixiedust")
devtools::test("C:/Users/Nutter/Documents/GitHub/pixiedust")
x <- dust(lm(mpg ~ qsec + factor(am) + wt, data = mtcars))
sprinkle(x, rows = 1, cols = 1, replace = "Intercept")
x <- dust(lm(mpg ~ qsec + factor(am) + wt, data = mtcars))
rows = 1
cols = 1
sprinkles <- list(replace = "Intercept")
indices <- x[[part]][["row"]] %in% rows &
x[[part]][["col"]] %in% cols
part = "body"
indices <- x[[part]][["row"]] %in% rows &
x[[part]][["col"]] %in% cols
indices
devtools::test("C:/Users/Nutter/Documents/GitHub/pixiedust")
x <- dust(lm(mpg ~ qsec + factor(am) + wt, data = mtcars))
sprinkle(x, rows = 1, cols = 1,
bg_pattern = c("orchid", "aquamarine"))$body$bg
x <- dust(lm(mpg ~ qsec + factor(am) + wt, data = mtcars))
sprinkle(x, rows=1, cols=1, bg_pattern_by = "column")$bg_pattern_by
devtools::test("C:/Users/Nutter/Documents/GitHub/pixiedust")
devtools::test("C:/Users/Nutter/Documents/GitHub/pixiedust")
devtools::document("C:/Users/Nutter/Documents/GitHub/pixiedust")
devtools::check("C:/Users/Nutter/Documents/GitHub/pixiedust",
args = "--as-cran")
library(microbenchmark)
microbenchmark(
new = fit %>% medley_model() %>% sprinkle(bg_pattern_by = "rows")
)
library(microbenchmark)
microbenchmark(
new = dust(fit) %>% medley_model() %>% sprinkle(bg_pattern_by = "rows")
)
devtools::check("C:/Users/Nutter/Documents/GitHub/pixiedust",
args = "--as-cran")
devtools::document("C:/Users/Nutter/Documents/GitHub/pixiedust")
devtools::install_local("C:/Users/Nutter/Documents/GitHub/pixiedust")
?checkmate::checkChoice
checkmate::assertChoice(c("x", "y"), letters)
checkmate::assertChoice(c("x"), letters)
checkmate::assertChoice(c("x"), c("xx", "xy"))
checkmate::checkChoice(c("x"), c("xx", "xy"))
?cor
checkmate::checkChoice("p",
choices = c("pearson", "kendall", "spearman"))
library(checkmate)
assert_choice("p",
choices = c("pearson", "kendall", "spearman"))
library(checkmate)
checkChoice("p",
choices = c("pearson", "kendall", "spearman"))
x = "p"
choices = c("pearson", "kendall", "spearman")
pmatch(x, choices)
checkChoice(character(0),
choices = c("pearson", "kendall", "spearman"))
?match_arg
?match.arg
pmatch("x", a)
a <- c("xabc", "xaaa", "xbcd")
pmatch("x", a)
?pmatch
pmatch("x", a)
pmatch("xa", a)
pmatch("a", a)
?match
pmatch("a", a)
?pmatch
pmatch("a", a, duplicats.ok = TRUE)
pmatch("a", a, duplicates.ok = TRUE)
match("x", c("xxx", "xyz")
)
pmatch("x", c("xxx", "xyz"))
pmatch("x", c("xxx"))
pmatch(c("", "ab", "ab"), c("abc", "ab"), dup = FALSE)
pmatch(c("", "ab", "ab"), c("abc", "ab"), dup = TRUE)
?checkArg
?checkChoice
checkChoice(c("a", "b"), list(c("a", "b")))
checkChoice
library(checkmate)
checkChoice("p",
choices = c("pearson", "kendall", "spearman"))
checkMatch <- function(x, choices, several_ok = FALSE)
{
x <- x[1]
x <- pmatch(x, choices)[1]
if (several_ok)
{
checkSubset(x, choices)
}
else
{
checkChoice(x, choices)
}
x
}
checkMatch("p", c("pearson", "kendall", "spearman")
)
x = "p"
choices = c("pearson", "kendall", "spearman")
x <- x[1]
x <- pmatch(x, choices)[1]
x
library(checkmate)
checkChoice("p",
choices = c("pearson", "kendall", "spearman"))
checkMatch <- function(x, choices, several_ok = FALSE)
{
x <- x[1]
x <- x[pmatch(x, choices)[1]]
if (several_ok)
{
checkSubset(x, choices)
}
else
{
checkChoice(x, choices)
}
x
}
checkMatch("p", c("pearson", "kendall", "spearman"))
library(checkmate)
checkChoice("p",
choices = c("pearson", "kendall", "spearman"))
checkMatch <- function(x, choices, several_ok = FALSE)
{
x <- x[1]
x <- choices[pmatch(x, choices)[1]]
if (several_ok)
{
checkSubset(x, choices)
}
else
{
checkChoice(x, choices)
}
x
}
checkMatch("p", c("pearson", "kendall", "spearman"))
library(checkmate)
checkChoice("p",
choices = c("pearson", "kendall", "spearman"))
checkMatch <- function(x, choices, several_ok = FALSE)
{
x <- x[1]
x <- choices[pmatch(x, choices)]
if (several_ok)
{
checkSubset(x, choices)
}
else
{
checkChoice(x, choices)
}
x
}
checkMatch("p", c("pearson", "pearson2", "kendall", "spearman"), several_ok = TRUE)
x = "p"
choices = c("pearson", "pearson2", "kendall", "spearman")
choices[pmatch(x, choices)]
?pmatch
choices[pmatch(x, choices, duplicates.ok = several_ok)]
several_ok = TRUE
choices[pmatch(x, choices, duplicates.ok = several_ok)]
pmatch(x, choices, duplicates.ok = several_ok)
match.arg
x
choices
pmatch(x, choices, duplicates.ok = several_ok)
choices[pmatch(x, choices, nomatch = 0, duplicates.ok = several_ok)]
checkMatch <- function(x, choices, several_ok = FALSE)
{
x <- x[1]
x <- choices[pmatch(x, choices, nomatch = 0, duplicates.ok = several_ok)]
if (several_ok)
{
checkSubset(x, choices)
}
else
{
checkChoice(x, choices)
}
x
}
checkMatch(x = "p",
choices = c("pearson", "pearson2", "kendall", "spearman"),
several_ok = TRUE)
assertMatch(x = "p",
choices = c("pearson", "kendall", "spearman"),
several_ok = TRUE)
assertMatch <- function(x, choices, several_ok = FALSE)
{
x <- x[1]
x <- choices[pmatch(x, choices, nomatch = 0, duplicates.ok = several_ok)]
if (several_ok)
{
assertSubset(x, choices)
}
else
{
assertChoice(x, choices)
}
x
}
assertMatch(x = "p",
choices = c("pearson", "kendall", "spearman"),
several_ok = TRUE)
assertMatch(x = "q",
choices = c("pearson", "kendall", "spearman"),
several_ok = TRUE)
checkChoice = function(x, choices, partial = FALSE) {
if (partial) x <- choices[pmatch(x, choices)]
qassert(choices, "a")
if (!qtest(x, "a1") || x %nin% choices)
return(sprintf("Must be element of set {'%s'}", paste0(unique(choices), collapse = "','")))
return(TRUE)
}
checkChoice("p", c("pearson", "kendall", "spearman"))
"%nin%" = function(x, y) {
!match(x, y, nomatch = 0L)
}
checkChoice = function(x, choices, partial = FALSE) {
if (partial) x <- choices[pmatch(x, choices)]
qassert(choices, "a")
if (!qtest(x, "a1") || x %nin% choices)
return(sprintf("Must be element of set {'%s'}", paste0(unique(choices), collapse = "','")))
return(TRUE)
}
checkChoice("p", c("pearson", "kendall", "spearman"))
checkChoice("p", c("pearson", "kendall", "spearman"), partial = TRUE)
"%nin%" = function(x, y) {
!match(x, y, nomatch = 0L)
}
checkMatch = function(x, choices, partial = FALSE) {
if (partial) x <- choices[pmatch(x, choices)]
qassert(choices, "a")
if (!qtest(x, "a1") || x %nin% choices)
return(sprintf("Must be element of set {'%s'}", paste0(unique(choices), collapse = "','")))
return(x)
}
checkMatch("p", c("pearson", "kendall", "spearman"), partial = TRUE)
checkMatch = function(x, choices, partial = FALSE) {
if (partial) x <- choices[pmatch(x, choices)]
qassert(choices, "a")
if (!qtest(x, "a1") || x %nin% choices)
return(sprintf("Must be element of set {'%s'}", paste0(unique(choices), collapse = "','")))
return(x)
}
checkMatch("q", c("pearson", "kendall", "spearman"), partial = TRUE)
assertMatch <- makeAssertionFunction(checkMatch)
assertMatch("p", c("pearson", "kendall", "spearman"), partial = TRUE)
assertMatch("pearson", c("pearson", "kendall", "spearman"), partial = TRUE)
checkMatch("q", c("pearson", "kendall", "spearman"), partial = TRUE)
checkMatch("p", c("pearson", "kendall", "spearman"), partial = TRUE)
?assertSubset
assert_match_arg <- function(x, choices, several_ok, ...)
{
x <- choices[pmatch(x, choices, nomatch = 0L, duplicates.ok = several_ok)]
if (several_ok) assertSubset(x, choices, ...)
else assertChoice(x, choices, ...)
x
}
assert_match_arg("p", c("pearson", "kendall", "spearman"))
assert_match_arg <- function(x, choices, several_ok = FALSE, ...)
{
x <- choices[pmatch(x, choices, nomatch = 0L, duplicates.ok = several_ok)]
if (several_ok) assertSubset(x, choices, ...)
else assertChoice(x, choices, ...)
x
}
assert_match_arg("p", c("pearson", "kendall", "spearman"))
assert_match_arg <- function(x, choices, several_ok = FALSE, ...)
{
x <- choices[pmatch(x, choices, nomatch = 0L, duplicates.ok = several_ok)]
if (several_ok) assertSubset(x, choices, ...)
else assertChoice(x, choices, ...)
x
}
assert_match_arg("q", c("pearson", "kendall", "spearman"))
?cor
assert_match_arg("q", c("pearson", "kendall", "spearman"),
.var.name = "method")
coll <- makeAssertCollection()
assert_match_arg("q", c("pearson", "kendall", "spearman"),
.var.name = "method",
add = coll)
reportAssertions()
reportAssertions(coll)
class(coll)
assert_match_arg("p", c("pearson", "kendall", "spearman"),
.var.name = "method")
assert_match_arg(c("p", "k"), c("pearson", "kendall", "spearman"),
.var.name = "method")
assert_match_arg(c("p", "k"), c("pearson", "kendall", "spearman"),
.var.name = "method",
several_ok = TRUE)
assert_match_arg(c("p", "k"), c("pearson", "kendall", "spearman"),
.var.name = "method")
assert_match_arg(c("p", "k"), c("pearson", "kendall", "spearman"),
.var.name = "method",
several_ok = TRUE)
assert_match_arg("q", c("pearson", "kendall", "spearman"),
.var.name = "method")
coll <- makeAssertCollection()
assert_match_arg("q", c("pearson", "kendall", "spearman"),
.var.name = "method",
add = coll)
reportAssertions(coll)
?match.arg
