sprinkle(cols = 2:4,
round = 3) %>%
sprinkle(cols = 5,
fn = quote(pvalString(value))) %>%
sprinkle(rows = 1,
bg = "rgb(0,0,0,.25)") %>%
sprinkle(rows = 2,
bold = TRUE,
italic = TRUE,
font_size = 20,
font_color = "red") %>%
sprinkle(rows = 4,
border = "all",
border_color = "blue") %>%
sprinkle(rows = 1,
bg = "gray",
part = "head") %>%
sprinkle_print_method("FlexTable")
x
devtools::document("C:/Users/Nutter/Documents/GitHub/pixiedust")
devtools::install_local("C:/Users/Nutter/Documents/GitHub/pixiedust")#, build_vignettes = TRUE)
devtools::document("C:/Users/Nutter/Documents/GitHub/pixiedust")
devtools::install_local("C:/Users/Nutter/Documents/GitHub/pixiedust")#, build_vignettes = TRUE)
library(pixiedust)
?as.FlexTable.dust
library(pixiedust)
options(pixiedust_print_method = "html")
x <- dust(lm(mpg ~ qsec + factor(am) + wt, data = mtcars)) %>%
sprinkle(pad = 4) %>%
sprinkle(cols = 2:4,
round = 3) %>%
sprinkle(cols = 5,
fn = quote(pvalString(value))) %>%
sprinkle(rows = 1,
bg = "rgb(0,0,0,.25)") %>%
sprinkle(rows = 2,
bold = TRUE,
italic = TRUE,
font_size = 20,
font_color = "red") %>%
sprinkle(rows = 4,
border = "all",
border_color = "blue") %>%
sprinkle(rows = 1,
bg = "gray",
part = "head")
as.FlexTable.dust()
as.FlexTable.dust(x)
a <- as.FlexTable.dust(x)
a
?pixiedust::sprinkle
color = "#000000100
"
color = "#000000100"
col <- substr(color, 2, 7)
alpha <- substr(color, 8, 10)
col
alpha
color = "#000000"
col <- substr(color, 2, 7)
alpha <- substr(color, 8, 10)
col
alpha
sprintf("\\transparent{%s}\\%s[HTML]{%s}",
alpha,
element,
col)
element = "color"
sprintf("\\transparent{%s}\\%s[HTML]{%s}",
alpha,
element,
col)
color
col <- substr(color, 2, 7)
alpha <- substr(color, 8, 10)
alpha[alpha == ""] <- 100
alpha <- as.numeric(alpha) / 100
sprintf("\\transparent{%s}\\%s[HTML]{%s}",
alpha,
element,
col)
color = "rgba(0,0,0,1.0)"
stringr::str_extract_all(color, "\\d{1,3}", simplify = TRUE)
stringr::str_extract_all(color,
"(\\d{1,3}|\\d{1,3}[.]\\d{1,3})",
simplify = TRUE)
stringr::str_split_fixed(color,
",",
n = 4)
gsub("([[:alpha:]]|[(]|[)])",
"",
color)
rgb <- gsub("([[:alpha:]]|[(]|[)])",
"",
color)
stringr::str_split_fixed(rgb, ",", n=4)
rgb <- gsub("([[:alpha:]]|[(]|[)])",
"",
color)
rgb <- stringr::str_split_fixed(rgb, ",", n=4)
rgb <- trimws(rgb)
rgb
paste0(rgb[, 1:3], collapse = ",")
alpha <- rgb[, 4]
alpha
convertColor(color)
color
if (length(color) == 0) return(character(0))
(grepl("#", color))
(grepl("rgb", color, ignore.case = TRUE))
rgb <- gsub("([[:alpha:]]|[(]|[)])",
"",
color)
rgb <- stringr::str_split_fixed(rgb, ",", n=4)
rgb <- trimws(rgb)
col <- paste0(rgb[, 1:3], collapse = ",")
alpha <- rgb[, 4]
sprintf("\\transparent{%s}\\%s[RGB]{%s}",
alpha,
element,
col)
?convertColor
latex_color <- function(color,
element = c("color", "textcolor", "cellcolor", "arrayrulecolor"))
{
element = match.arg(element,
c("color", "textcolor", "cellcolor", "arrayrulecolor"))
if (length(color) == 0) return(character(0))
if (grepl("#", color)){
col <- substr(color, 2, 7)
alpha <- substr(color, 8, 10)
alpha[alpha == ""] <- 100
alpha <- as.numeric(alpha) / 100
return(sprintf("\\transparent{%s}\\%s[HTML]{%s}",
alpha,
element,
col))
}
else if (grepl("rgb", color, ignore.case = TRUE)){
rgb <- gsub("([[:alpha:]]|[(]|[)])",
"",
color)
rgb <- stringr::str_split_fixed(rgb, ",", n=4)
rgb <- trimws(rgb)
col <- paste0(rgb[, 1:3], collapse = ",")
alpha <- rgb[, 4]
return(sprintf("\\transparent{%s}\\%s[RGB]{%s}",
alpha,
element,
col))
}
else return(paste0("{", color, "}"))
}
latex_color(color)
latex_color("#00000050")
latex_color("#00000025")
latex_color("rbg(100,25,107,.25)")
latex_color("rgba(100,25,107,.25)")
devtools::document("C:/Users/Nutter/Documents/GitHub/pixiedust")
devtools::install_local("C:/Users/Nutter/Documents/GitHub/pixiedust")#, build_vignettes = TRUE)
library(pixiedust)
options(pixiedust_print_method = "html")
x <- dust(lm(mpg ~ qsec + factor(am) + wt, data = mtcars)) %>%
sprinkle(pad = 4) %>%
sprinkle(cols = 2:4,
round = 3) %>%
sprinkle(cols = 5,
fn = quote(pvalString(value))) %>%
sprinkle(rows = 1,
bg = "rgb(0,0,0,.25)") %>%
sprinkle(rows = 2,
bold = TRUE,
italic = TRUE,
font_size = 20,
font_color = "red") %>%
sprinkle(rows = 4,
border = "all",
border_color = "blue") %>%
sprinkle(rows = 1,
bg = "gray",
part = "head") %>%
sprinkle_print_method("FlexTable")
x
f <- as.FlexTable.dust(x)
f
ReporteRs::spanFlexTableColumns(f, i = 1, from = 1, to = 3)
ReporteRs::spanFlexTableColumns(f, i = 1, from = 1, to = 3) %>%
ReporteRs::spanFlexTableRows(j = 1, from = 1, to = 3)
addHeaderRow(f, value = c("term", "estimate", "se", "t", "p"))
ReporteRs::addHeaderRow(f, value = c("term", "estimate", "se", "t", "p"))
ReporteRs::addHeaderRow(f, value = c("term", "estimate"), colspan = c(2, 3))
f
f <- as.FlexTable.dust(x)
ReporteRs::addHeaderRow(f, value = c("term", "estimate"), colspan = c(2, 3))
f <- as.FlexTable.dust(x)
ReporteRs::addHeaderRow(f, value = c("term", "estimate", "se", "t", "p"))
ReporteRs::addHeaderRow(f, value = c("term", "estimate"), colspan = c(2, 3))
x$head
?ReporteRs::addHeaderRow
part_prep_flextable(x$head)
source('~/GitHub/pixiedust/R/print_dust_flextable.R', echo=TRUE)
source('~/GitHub/pixiedust/R/perform_function.R', echo=TRUE)
part_prep_flextable(x$head)
x$head
x$head[x$head$colspan > 0, ]
unique(x$head$row)
source('~/GitHub/pixiedust/R/print_dust_flextable.R', echo=TRUE)
print_dust_flextable(x)
?ReporteRs::textProperties
x$valign
x$head$valign
?cell.properties
?ReporteRs::cellProperties
x$head$pad
names(x$head)
stringr::str_split_fixed(x$head$right_border, " ", n=3)
stringr::str_split_fixed(x$body$right_border, " ", n=3)
applyReportersDefaults <- function(x)
{
x$font_color[x$font_color == ""] <- "black"
x$font_size[x$font_size == ""] <- getOption("ReporteRs-fontsize", 11)
x$font_size <- as.numeric(x$font_size)
x$font_weight <- ifelse(test = x$bold, "bold", "normal")
x$font_style <- ifelse(test = x$italic, "italic", "normal")
x$font_family[x$font_family == ""] <- getOption("ReporteRs-default-font",
"Times New Roman")
x$pad[x$pad == ""] <- 0
x$pad <- as.numeric(x$pad)
prop_mat_top    <- stringr::str_split_fixed(x$top_border,    " ", n = 3)
prop_mat_bottom <- stringr::str_split_fixed(x$bottom_border, " ", n = 3)
prop_mat_left   <- stringr::str_split_fixed(x$left_border,   " ", n = 3)
prop_mat_right  <- stringr::str_split_fixed(x$right_border,  " ", n = 3)
x$border_top_color    <- make_reporter_color(prop_mat_top[, 3])
x$border_bottom_color <- make_reporter_color(prop_mat_bottom[, 3])
x$border_left_color   <- make_reporter_color(prop_mat_left[, 3])
x$border_right_color  <- make_reporter_color(prop_mat_right[, 3])
x$border_top_style    <- prop_mat_top[, 2]
x$border_bottom_style <- prop_mat_bottom[, 2]
x$border_left_style   <- prop_mat_left[, 2]
x$border_right_style  <- prop_mat_right[, 2]
x$border_top_style[x$border_top_style == ""]       <- "none"
x$border_bottom_style[x$border_bottom_style == ""] <- "none"
x$border_left_style[x$border_left_style == ""]     <- "none"
x$border_right_style[x$border_right_style == ""]   <- "none"
x$border_top_width    <- stringr::str_extract(prop_mat_top[, 1],    "\\d{1,4}")
x$border_bottom_width <- stringr::str_extract(prop_mat_bottom[, 1], "\\d{1,4}")
x$border_left_width   <- stringr::str_extract(prop_mat_left[, 1],   "\\d{1,4}")
x$border_right_width  <- stringr::str_extract(prop_mat_right[, 1],  "\\d{1,4}")
x$bg <- make_reporter_color(x$bg)
x$bg[x$bg == ""] <- "transparent"
}
applyReportersDefaults(x$body)
applyReportersDefaults <- function(x)
{
x$font_color[x$font_color == ""] <- "black"
x$font_size[x$font_size == ""] <- getOption("ReporteRs-fontsize", 11)
x$font_size <- as.numeric(x$font_size)
x$font_weight <- ifelse(test = x$bold, "bold", "normal")
x$font_style <- ifelse(test = x$italic, "italic", "normal")
x$font_family[x$font_family == ""] <- getOption("ReporteRs-default-font",
"Times New Roman")
x$pad[x$pad == ""] <- 0
x$pad <- as.numeric(x$pad)
prop_mat_top    <- stringr::str_split_fixed(x$top_border,    " ", n = 3)
prop_mat_bottom <- stringr::str_split_fixed(x$bottom_border, " ", n = 3)
prop_mat_left   <- stringr::str_split_fixed(x$left_border,   " ", n = 3)
prop_mat_right  <- stringr::str_split_fixed(x$right_border,  " ", n = 3)
x$border_top_color    <- make_reporter_color(prop_mat_top[, 3])
x$border_bottom_color <- make_reporter_color(prop_mat_bottom[, 3])
x$border_left_color   <- make_reporter_color(prop_mat_left[, 3])
x$border_right_color  <- make_reporter_color(prop_mat_right[, 3])
x$border_top_style    <- prop_mat_top[, 2]
x$border_bottom_style <- prop_mat_bottom[, 2]
x$border_left_style   <- prop_mat_left[, 2]
x$border_right_style  <- prop_mat_right[, 2]
x$border_top_style[x$border_top_style == ""]       <- "none"
x$border_bottom_style[x$border_bottom_style == ""] <- "none"
x$border_left_style[x$border_left_style == ""]     <- "none"
x$border_right_style[x$border_right_style == ""]   <- "none"
x$border_top_width    <- stringr::str_extract(prop_mat_top[, 1],    "\\d{1,4}")
x$border_bottom_width <- stringr::str_extract(prop_mat_bottom[, 1], "\\d{1,4}")
x$border_left_width   <- stringr::str_extract(prop_mat_left[, 1],   "\\d{1,4}")
x$border_right_width  <- stringr::str_extract(prop_mat_right[, 1],  "\\d{1,4}")
x$bg <- make_reporter_color(x$bg)
x$bg[x$bg == ""] <- "transparent"
x
}
applyReportersDefaults(x$body)
applyReportersDefaults <- function(x)
{
x$font_color[x$font_color == ""] <- "black"
x$font_size[x$font_size == ""] <- getOption("ReporteRs-fontsize", 11)
x$font_size <- as.numeric(x$font_size)
x$font_weight <- ifelse(test = x$bold, "bold", "normal")
x$font_style <- ifelse(test = x$italic, "italic", "normal")
x$font_family[x$font_family == ""] <- getOption("ReporteRs-default-font",
"Times New Roman")
x$pad[x$pad == ""] <- 0
x$pad <- as.numeric(x$pad)
prop_mat_top    <- stringr::str_split_fixed(x$top_border,    " ", n = 3)
prop_mat_bottom <- stringr::str_split_fixed(x$bottom_border, " ", n = 3)
prop_mat_left   <- stringr::str_split_fixed(x$left_border,   " ", n = 3)
prop_mat_right  <- stringr::str_split_fixed(x$right_border,  " ", n = 3)
x$border_top_color    <- make_reporter_color(prop_mat_top[, 3])
x$border_bottom_color <- make_reporter_color(prop_mat_bottom[, 3])
x$border_left_color   <- make_reporter_color(prop_mat_left[, 3])
x$border_right_color  <- make_reporter_color(prop_mat_right[, 3])
x$border_top_style    <- prop_mat_top[, 2]
x$border_bottom_style <- prop_mat_bottom[, 2]
x$border_left_style   <- prop_mat_left[, 2]
x$border_right_style  <- prop_mat_right[, 2]
x$border_top_style[x$border_top_style == ""]       <- "none"
x$border_bottom_style[x$border_bottom_style == ""] <- "none"
x$border_left_style[x$border_left_style == ""]     <- "none"
x$border_right_style[x$border_right_style == ""]   <- "none"
x$border_top_width    <- stringr::str_extract(prop_mat_top[, 1],    "\\d{1,4}")
x$border_bottom_width <- stringr::str_extract(prop_mat_bottom[, 1], "\\d{1,4}")
x$border_left_width   <- stringr::str_extract(prop_mat_left[, 1],   "\\d{1,4}")
x$border_right_width  <- stringr::str_extract(prop_mat_right[, 1],  "\\d{1,4}")
x$border_top_width[is.na(x$border_top_width)]       <- 1
x$border_bottom_width[is.na(x$border_bottom_width)] <- 1
x$border_left_width[is.na(x$border_left_width)]     <- 1
x$border_right_width[is.na(x$border_right_width)]   <- 1
x$bg <- make_reporter_color(x$bg)
x$bg[x$bg == ""] <- "transparent"
x
}
applyReportersDefaults(x$body)
make_reporter_color <- function(col)
{
each_color <- function(col)
{
if (col == "")
{
col <- "transparent"
}
else if (grepl("^rgb", col))
{
col <- gsub("([[:alpha:]]+|[(]|[)])", "", col) %>%
stringr::str_split_fixed(",", n=4) %>%
trimws()
col[, 1:3] <-
as.numeric(col[, 1:3]) %>%
as.hexmode() %>%
toupper() %>%
stringr::str_pad(2, pad = "0")
col[, 4] <- ifelse(col[, 4] != "",
as.numeric(col[, 4]) * 100,
col[, 4])
apply(col, 1, paste, collapse = "") %>%
paste0("#", .)
}
else{
col
}
}
vapply(col, each_color, character(1))
}
applyReportersDefaults <- function(x)
{
x$font_color[x$font_color == ""] <- "black"
x$font_size[x$font_size == ""] <- getOption("ReporteRs-fontsize", 11)
x$font_size <- as.numeric(x$font_size)
x$font_weight <- ifelse(test = x$bold, "bold", "normal")
x$font_style <- ifelse(test = x$italic, "italic", "normal")
x$font_family[x$font_family == ""] <- getOption("ReporteRs-default-font",
"Times New Roman")
x$pad[x$pad == ""] <- 0
x$pad <- as.numeric(x$pad)
prop_mat_top    <- stringr::str_split_fixed(x$top_border,    " ", n = 3)
prop_mat_bottom <- stringr::str_split_fixed(x$bottom_border, " ", n = 3)
prop_mat_left   <- stringr::str_split_fixed(x$left_border,   " ", n = 3)
prop_mat_right  <- stringr::str_split_fixed(x$right_border,  " ", n = 3)
x$border_top_color    <- make_reporter_color(prop_mat_top[, 3])
x$border_bottom_color <- make_reporter_color(prop_mat_bottom[, 3])
x$border_left_color   <- make_reporter_color(prop_mat_left[, 3])
x$border_right_color  <- make_reporter_color(prop_mat_right[, 3])
x$border_top_style    <- prop_mat_top[, 2]
x$border_bottom_style <- prop_mat_bottom[, 2]
x$border_left_style   <- prop_mat_left[, 2]
x$border_right_style  <- prop_mat_right[, 2]
x$border_top_style[x$border_top_style == ""]       <- "none"
x$border_bottom_style[x$border_bottom_style == ""] <- "none"
x$border_left_style[x$border_left_style == ""]     <- "none"
x$border_right_style[x$border_right_style == ""]   <- "none"
x$border_top_width    <- stringr::str_extract(prop_mat_top[, 1],    "\\d{1,4}")
x$border_bottom_width <- stringr::str_extract(prop_mat_bottom[, 1], "\\d{1,4}")
x$border_left_width   <- stringr::str_extract(prop_mat_left[, 1],   "\\d{1,4}")
x$border_right_width  <- stringr::str_extract(prop_mat_right[, 1],  "\\d{1,4}")
x$border_top_width[is.na(x$border_top_width)]       <- 1
x$border_bottom_width[is.na(x$border_bottom_width)] <- 1
x$border_left_width[is.na(x$border_left_width)]     <- 1
x$border_right_width[is.na(x$border_right_width)]   <- 1
x$bg <- make_reporter_color(x$bg)
x$bg[x$bg == ""] <- "transparent"
x
}
applyReportersDefaults(x$body)
lapply(x[[c("head", "body", "interfoot", "foot")]],
applyReportersDefaults)
x[[c("head", "body", "interfoot", "foot")]]
lapply(x[c("head", "body", "interfoot", "foot")],
applyReportersDefaults)
source('~/GitHub/pixiedust/R/print_dust_flextable.R', echo=TRUE)
lapply(x[c("head", "body", "interfoot", "foot")],
applyReportersDefaults)
flextable_body(x$body)
?cellProperties
body = x$body
body
x[c("head", "body", "interfoot", "foot")] <-
lapply(x[c("head", "body", "interfoot", "foot")],
applyReportersDefaults)
body <- x$body
body
source('~/GitHub/pixiedust/R/print_dust_flextable.R', echo=TRUE)
print_dust_flextable(x)
source('~/GitHub/pixiedust/R/print_dust_flextable.R', echo=TRUE)
print_dust_flextable(x)
?sprinkle
body$valign
source('~/GitHub/pixiedust/R/print_dust_flextable.R', echo=TRUE)
print_dust_flextable(x)
?addHeaderRow
?addRowHeader
?ReporteRs::addHeaderRow
source('~/GitHub/pixiedust/R/print_dust_flextable.R', echo=TRUE)
print_dust_flextable(x)
source('~/GitHub/pixiedust/R/print_dust_flextable.R', echo=TRUE)
print_dust_flextable(x)
x
x <- dust(lm(mpg ~ qsec + factor(am) + wt, data = mtcars)) %>%
sprinkle(pad = 4) %>%
sprinkle(cols = 2:4,
round = 3) %>%
sprinkle(cols = 5,
fn = quote(pvalString(value))) %>%
sprinkle(rows = 1,
bg = "rgb(0,0,0,.25)") %>%
sprinkle(rows = 2,
bold = TRUE,
italic = TRUE,
font_size = 20,
font_color = "red") %>%
sprinkle(rows = 4,
border = "all",
border_color = "blue") %>%
sprinkle(rows = 1,
bg = "gray",
part = "head") %>%
sprinkle_print_method("FlexTable")
x
x[c("head", "body", "interfoot", "foot")] <-
lapply(x[c("head", "body", "interfoot", "foot")],
applyReportersDefaults)
ft <- flextable_body(x$body)
head <- x$head[x$head$colspan > 0, ]
unique(x$head$row)
i = 1
row_match <- head$row == i
head$value[row_match]
ReporteRs::addHeaderRow(
x = ft,
value = head$value[row_match],
colspan = head$colspan[row_match],
text.properties =
ReporteRs::textProperties(
color = head$font_color[row_match],
font.size = as.numeric(head$font_size[row_match]),
font.weight = head$font_weight[row_match],
font.style = head$font_style[row_match],
font.family = head$font_family[row_match]
),
cell.properties =
ReporteRs::cellProperties(
padding = as.numeric(head$pad[row_match]),
border.bottom.color = head$border_bottom_color[row_match],
border.bottom.style = head$border_bottom_style[row_match],
border.bottom.width = head$border_bottom_width[row_match],
border.left.color   = head$border_left_color[row_match],
border.left.style   = head$border_left_style[row_match],
border.left.width   = head$border_left_width[row_match],
border.top.color    = head$border_top_color[row_match],
border.top.style    = head$border_top_style[row_match],
border.top.width    = head$border_top_width[row_match],
border.right.color  = head$border_right_color[row_match],
border.right.style  = head$border_right_style[row_match],
border.right.width  = head$border_right_width[row_match],
vertical.align   = head$valign[row_match],
background.color = head$bg[row_match]
)
)
head$font_weight
head$font_weight[row_match]
source('~/GitHub/pixiedust/R/print_dust_flextable.R', echo=TRUE)
print_dust_flextable(x)
?bind_rows
library(dplyr)
?bind_rows
tidy(fit)
broom::tidy(fit)
fit
fit <- lm(mpg ~ qsec + wt + factor(am) + factor(gear), data = mpg)
fit <- lm(mpg ~ qsec + wt + factor(am) + factor(gear), data = mtcars)
dust(fit)
library(pixiedust)
dust(fit)
dust(fit, descriptors = c("term_plain", "level", "level_detail"))
dust(fit, descriptors = c("term", "term_plain", "level", "level_detail"))
mtcars$am = factor(mtcars$am)
mtcars$gear = factor(mtcars$gear)
dust(fit, descriptors = c("term", "term_plain", "level", "level_detail"))
